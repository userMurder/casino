from aiocryptopay import AioCryptoPay, Networks
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, \
    KeyboardButton
import asyncio
import uuid
import random
import sqlite3
import config
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
API_TOKEN = config.API_TOKEN
CRYPTO_API_TOKEN = config.CRYPTOPAY_API_TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CryptoPay
cryptopay = AioCryptoPay(token=CRYPTO_API_TOKEN, network=Networks.TEST_NET)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('casino_bot.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users
              (user_id INTEGER PRIMARY KEY, balance REAL)''')
conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–æ–≤
log_conn = sqlite3.connect(config.LOG_FILE)
log_cursor = log_conn.cursor()
log_cursor.execute('''
    CREATE TABLE IF NOT EXISTS logs (
        log_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        action TEXT,
        amount REAL,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
''')
log_conn.commit()

referral_conn = sqlite3.connect(config.REFERRAL_FILE)
referral_cursor = referral_conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É referrals, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
referral_cursor.execute('''
    CREATE TABLE IF NOT EXISTS referrals (
        referral_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        referral_code TEXT,
        referred_user_id INTEGER,
        status TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
''')

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
referral_conn.commit()


def log_action(user_id, action, amount):
    log_cursor.execute("INSERT INTO logs (user_id, action, amount) VALUES (?, ?, ?)",
                       (user_id, action, amount))
    log_conn.commit()


async def notify_admins(message):
    chat_id = config.chat_id_log
    await bot.send_message(chat_id, message)


def generate_referral_code(user_id):
    return f"{user_id}"


def generate_referral_link(user_id):
    referral_code = generate_referral_code(user_id)
    return f"https://t.me/FulldBetBot?start={referral_code}"


# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("start"))
async def send_welcome(message: Message):
    user_id = message.from_user.id
    referral_code = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    if len(message.text.split()) > 1:
        referral_code = message.text.split()[1]

    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()

    if user is None:
        cursor.execute("INSERT INTO users (user_id, balance) VALUES (?, ?)", (user_id, 100))
        conn.commit()
        log_action(user_id, "Registration", 100)
        await message.answer(
            "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∫–∞–∑–∏–Ω–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ 10 USDT.\n/help –¥–ª—è –ø–æ–º–æ—â–∏")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
        if referral_code:
            referral_cursor.execute("SELECT * FROM referrals WHERE referral_code=?", (referral_code,))
            referral_record = referral_cursor.fetchone()
            if referral_record:
                referrer_id = referral_record[1]
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω —ç—Ç–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª
                if referral_record[3] is None:
                    referral_cursor.execute("UPDATE referrals SET referred_user_id=?, status=? WHERE referral_code=?",
                                            (user_id, "completed", referral_code))
                    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (100, referrer_id))
                    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (100, user_id))
                    referral_conn.commit()
                    await bot.send_message(referrer_id,
                                           f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: @{message.from_user.username}!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 USDT.")

    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–∞–∑–∏–Ω–æ.")

    balance_button = KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")
    play_button = KeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å")
    deposit_button = KeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
    withdraw_button = KeyboardButton(text="üè¶ –í—ã–≤–æ–¥")
    refferal_button = KeyboardButton(text="üéâ–†–µ—Ñ–µ—Ä–∞–ª—ã")

    markup = ReplyKeyboardMarkup(
        keyboard=[
            [balance_button, play_button],
            [deposit_button, withdraw_button],
            [refferal_button]
        ],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –ö–æ–º–∞–Ω–¥–∞ /balance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
@dp.message(Command("balance"))
async def send_balance(message: Message):
    user_id = message.from_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()

    if user:
        balance = user[0]
        await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} USDT")
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@dp.message(lambda message: message.text == "üéâ–†–µ—Ñ–µ—Ä–∞–ª—ã")
async def send_referral_info(message: Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    referral_link = generate_referral_link(user_id)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –∏ –ø—Ä–∏–∑–∞—Ö
    referral_info = (
        "üéâ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
        "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ! –í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n\n"
        "1. –ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –≤–∞—à—É —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n"
        "2. –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: –í—ã –ø–æ–ª—É—á–∏—Ç–µ 100 USDT –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∏ –Ω–∞—á–Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ –∫–∞–∑–∏–Ω–æ.\n\n"
        f"üåü –í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}\n"
        f"–†–ï–§–ï–†–ê–õ–ö–ê –í–†–ï–ú–ï–ù–ù–û –ù–ï –†–ê–ë–û–¢–ê–ï–¢!!!!!!!!!!!!!!!!!!!!!!!!"
    )

    await message.answer(referral_info)


@dp.message(lambda message: message.text in ["üí∞ –ë–∞–ª–∞–Ω—Å", "üéÆ –ò–≥—Ä–∞—Ç—å", "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "üè¶ –í—ã–≤–æ–¥"])
async def handle_buttons(message: Message):
    if message.text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        await send_balance(message)
    elif message.text == "üéÆ –ò–≥—Ä–∞—Ç—å":
        await play_game(message)
    elif message.text == "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å":
        await deposit(message)
    elif message.text == "üè¶ –í—ã–≤–æ–¥":
        await withdraw(message)


# –ö–æ–º–∞–Ω–¥–∞ /addbalance –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message(Command("deposit"))
async def deposit(message: Message):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()

    if user:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíµ $1", callback_data="deposit_1")],
            [InlineKeyboardButton(text="üí∞ $10", callback_data="deposit_10")],
            [InlineKeyboardButton(text="üí∏ $100", callback_data="deposit_100")],
            [InlineKeyboardButton(text="üíµ $500", callback_data="deposit_500")],
            [InlineKeyboardButton(text="üí∞ $1000", callback_data="deposit_1000")],
            [InlineKeyboardButton(text="üíé $5000", callback_data="deposit_5000")],
            [InlineKeyboardButton(text="üíé $10000", callback_data="deposit_10000")]

        ])
        await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=markup)
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@dp.callback_query(lambda c: c.data and c.data.startswith("deposit_"))
async def process_deposit(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    amount = int(callback_query.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ callback_data
    invoice = await cryptopay.create_invoice(asset='USDT', amount=amount)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=invoice.mini_app_invoice_url)],
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞", url=invoice.bot_invoice_url)]
    ])
    await bot.send_message(user_id, f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {amount} USDT –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.", reply_markup=markup)

    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
    processed_invoices = set()

    while True:
        invoices = await cryptopay.get_invoices()
        for inv in invoices:
            invoice_id1 = invoices[0].invoice_id
            status = invoices[0].status
            amounts = invoices[0].amount

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—á–µ–Ω –ª–∏ —Å—á–µ—Ç –∏ –Ω–µ –±—ã–ª –ª–∏ –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            if status == 'paid' and invoice_id1 not in processed_invoices:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Å—á–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º
                if invoice_id1 == invoice.invoice_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å, –ª–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amounts, user_id))
                    conn.commit()
                    log_action(user_id, "Deposit", amounts)
                    processed_invoices.add(invoice_id1)  # –î–æ–±–∞–≤–ª—è–µ–º ID —Å—á–µ—Ç–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö

                    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
                    new_balance = cursor.fetchone()[0]
                    await bot.send_message(user_id,
                                           f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amounts} USDT. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} USDT.")
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    await notify_admins(f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n–°—É–º–º–∞: {amounts} USDT")
                else:
                    # –ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Å—á–µ—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º, –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞—á–∏—Å–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
                    log_action(user_id, "Deposit (Unexpected Invoice)", amounts)
                    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
                    new_balance = cursor.fetchone()[0]
                    await bot.send_message(user_id,
                                           f"‚ö†Ô∏è –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–µ –≤–∞—à —Å—á–µ—Ç, –Ω–æ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω.\n "
                                           f"–í–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amounts} USDT. \n"
                                           f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} USDT. \n"
                                           f"–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @dev_paketik.\n")
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏
                    await notify_admins(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
                                        f"–û–∂–∏–¥–∞–ª—Å—è ID —Å—á–µ—Ç–∞: {invoice.invoice_id}\n"
                                        f"–ü–æ–ª—É—á–µ–Ω ID —Å—á–µ—Ç–∞: {invoice_id1}\n"
                                        f"–°—É–º–º–∞: {amounts} USDT")
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞

        else:
            await asyncio.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            continue
        break  # –í—ã—Ö–æ–¥ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Å—á–µ—Ç

    await callback_query.answer()


image_paths = config.image_paths
####################–ù–ê–ß–ê–õ–û
# –ö–æ–º–∞–Ω–¥–∞ /play –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
user_game_status = {}


@dp.message(Command("play"))
async def play_game(message: types.Message):
    user_id = message.from_user.id

    if user_game_status.get(user_id, False):
        await message.answer("üö´ –í—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —Ç–µ–∫—É—â–∞—è –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.")
        return

    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()

    if user and user[0] >= 1:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ß–µ—Ç/–ù–µ—á–µ—Ç", callback_data="mode_even_odd")],
            [InlineKeyboardButton(text="–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ", callback_data="mode_higher_lower")],
            [InlineKeyboardButton(text="–®–∫–∞—Ç—É–ª–∫–∏", callback_data="mode_boxes")]
        ])
        await message.answer("üïπÔ∏è –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã - /help \n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=markup)
    else:
        await message.answer("üö´ –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Å –ø–æ–º–æ—â—å—é /deposit.")
        await message.answer("‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@dp.callback_query(lambda c: c.data.startswith("mode_"))
async def choose_game_mode(callback_query: CallbackQuery):
    await callback_query.answer()

    user_id = callback_query.from_user.id
    game_mode = callback_query.data.split("_")[1]

    if user_game_status.get(user_id, False):
        await callback_query.message.answer("üö´ –í—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —Ç–µ–∫—É—â–∞—è –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.")
        return

    #user_game_status[user_id] = True

    if game_mode == "even_odd":
        await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º: –ß–µ—Ç/–ù–µ—á–µ—Ç. üé≤")
    elif game_mode == "higher_lower":
        await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º: –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ. üé≤")
    elif game_mode == "boxes":
        await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º: –®–∫–∞—Ç—É–ª–∫–∏. üì¶")
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíµ 1 USDT", callback_data=f"stake_1_{game_mode}")],
            [InlineKeyboardButton(text="üí∞ 10 USDT", callback_data=f"stake_10_{game_mode}")],
            [InlineKeyboardButton(text="üí∏ 500 USDT", callback_data=f"stake_500_{game_mode}")],
            [InlineKeyboardButton(text="ü§ë 1000 USDT", callback_data=f"stake_1000_{game_mode}")],
            [InlineKeyboardButton(text="üí¥ 5000 USDT", callback_data=f"stake_5000_{game_mode}")]
        ])
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:", reply_markup=markup)
    else:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíµ 1 USDT", callback_data=f"stake_1_{game_mode}")],
            [InlineKeyboardButton(text="üí∞ 10 USDT", callback_data=f"stake_10_{game_mode}")],
            [InlineKeyboardButton(text="üí∏ 500 USDT", callback_data=f"stake_500_{game_mode}")],
            [InlineKeyboardButton(text="ü§ë 1000 USDT", callback_data=f"stake_1000_{game_mode}")],
            [InlineKeyboardButton(text="üí¥ 5000 USDT", callback_data=f"stake_5000_{game_mode}")]
        ])
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:", reply_markup=markup)


@dp.callback_query(lambda c: c.data.startswith("stake_"))
async def choose_stake(callback_query: CallbackQuery):
    await callback_query.answer()

    user_id = callback_query.from_user.id
    stake_data = callback_query.data.split("_")
    stake_amount = int(stake_data[1])
    game_mode = stake_data[2]

    if user_game_status.get(user_id, False):
        await callback_query.message.edit_text("üö´ –í—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —Ç–µ–∫—É—â–∞—è –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.")
        return

    user_game_status[user_id] = True

    if game_mode == "boxes":
        markup = InlineKeyboardMarkup(inline_keyboard=
        [
            [InlineKeyboardButton(text="üì¶", callback_data=f"box_1_{stake_amount}"),
             InlineKeyboardButton(text="üì¶", callback_data=f"box_2_{stake_amount}"),
             InlineKeyboardButton(text="üì¶", callback_data=f"box_3_{stake_amount}")]
        ]
        )
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–∞—Ç—É–ª–∫—É:", reply_markup=markup)
    else:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé≤ –ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫", callback_data=f"play_{stake_amount}_{game_mode}")]
        ])
        await callback_query.message.edit_text(
            f"üí∞ –°—Ç–∞–≤–∫–∞: {stake_amount} USDT. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∫–∏–Ω—É—Ç—å –∫—É–±–∏–∫:",
            reply_markup=markup)


@dp.callback_query(lambda c: c.data.startswith("box_"))
async def choose_box(callback_query: CallbackQuery):
    await callback_query.answer()

    user_id = callback_query.from_user.id
    box_data = callback_query.data.split("_")
    chosen_box = int(box_data[1])
    stake_amount = int(box_data[2])

    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()

    if user:
        balance = user[0]
        if balance >= stake_amount:
            try:
                prize_box = random.randint(1, 3)

                if chosen_box == prize_box:

                    win_amount = round(stake_amount * config.box_cof, 1)
                    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (win_amount, user_id))
                    result_message = f"üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ —à–∫–∞—Ç—É–ª–∫—É {chosen_box} –∏ –Ω–∞—à–ª–∏ –ø—Ä–∏–∑! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.1f} USDT!"
                    user_name = callback_query.from_user.username
                    await notify_win(user_name, win_amount, '–ö–æ—Ä–æ–±–∫–∏üì¶')
                else:
                    cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (stake_amount, user_id))
                    result_message = f"üòî –í—ã –≤—ã–±—Ä–∞–ª–∏ —à–∫–∞—Ç—É–ª–∫—É {chosen_box}, –Ω–æ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–∏–∑. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {stake_amount:.1f} USDT."

                conn.commit()
                updated_balance = cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,)).fetchone()[0]
                updated_balance = round(updated_balance, 1)

                await callback_query.message.edit_text(
                    f"{result_message}\nüíµ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {updated_balance} USDT.")
            except Exception as e:
                await callback_query.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
                conn.rollback()
        else:
            await callback_query.message.edit_text(
                "üö´ –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Å –ø–æ–º–æ—â—å—é /deposit.")

    user_game_status[user_id] = False
    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith("play_"))
async def play_dice_game(callback_query: CallbackQuery):
    global result_message
    user_id = callback_query.from_user.id
    play_data = callback_query.data.split("_")
    stake_amount = int(play_data[1])
    game_mode = play_data[2]

    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()

    if user and user[0] >= stake_amount:
        try:
            dice_message = await callback_query.message.answer_dice(emoji="üé≤")
            dice_value = dice_message.dice.value

            coefficient = config.coefficient

            if game_mode == "even":
                if dice_value % 2 == 0:
                    win_amount = round(stake_amount * coefficient, 1)
                    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (win_amount, user_id))
                    result_message = f"üéâ –í–∞–º –≤—ã–ø–∞–ª–æ {dice_value}. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.1f} USDT!"
                    user_name = callback_query.from_user.username
                    await notify_win(user_name, win_amount, '–ß–µ—Ç/–ù–µ—á–µ—Çüé≤')
                else:
                    loss_amount = round(stake_amount, 1)
                    cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (loss_amount, user_id))
                    result_message = f"üòî –í–∞–º –≤—ã–ø–∞–ª–æ {dice_value}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {loss_amount:.1f} USDT."

            elif game_mode == "higher":
                if dice_value >= 4:
                    win_amount = round(stake_amount * coefficient, 1)
                    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (win_amount, user_id))
                    result_message = f"üéâ –í–∞–º –≤—ã–ø–∞–ª–æ {dice_value}. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.1f} USDT!"
                    user_name = callback_query.from_user.username
                    await notify_win(user_name, win_amount, '–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µüé≤')
                else:
                    loss_amount = round(stake_amount, 1)
                    cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (loss_amount, user_id))
                    result_message = f"üòî –í–∞–º –≤—ã–ø–∞–ª–æ {dice_value}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {loss_amount:.1f} USDT."

            conn.commit()

            updated_balance = cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,)).fetchone()[0]
            updated_balance = round(updated_balance, 1)

            await callback_query.message.edit_text(f"{result_message} üíµ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {updated_balance} USDT.")
        except Exception as e:
            await callback_query.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            conn.rollback()
    else:
        await callback_query.message.edit_text(
            "üö´ –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Å –ø–æ–º–æ—â—å—é /deposit.")

    user_game_status[user_id] = False
    await callback_query.answer()


######################–ö–û–ù–ï–¶

user_cooldowns = {}

COOLDOWN_TIME = 30  # –í—Ä–µ–º—è –∫–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


@dp.message(Command("outbalance"))
async def withdraw(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–æ–¥–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ–¥–∞–≤–Ω–æ
    if user_id in user_cooldowns:
        last_withdraw_time = user_cooldowns[user_id]
        time_diff = datetime.now() - last_withdraw_time
        if time_diff < timedelta(seconds=COOLDOWN_TIME):
            remaining_time = COOLDOWN_TIME - int(time_diff.total_seconds())
            await message.answer(f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—ã–≤–æ–¥–æ–º —Å—Ä–µ–¥—Å—Ç–≤.")
            return

    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()

    if user:
        balance = user[0]
        if balance > 0:

            withdraw_10_button = KeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ 10%")
            withdraw_25_button = KeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ 25%")
            withdraw_50_button = KeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ 50%")
            withdraw_all_button = KeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ –≤—Å—ë")

            markup = ReplyKeyboardMarkup(
                keyboard=[
                    [withdraw_10_button, withdraw_25_button],
                    [withdraw_50_button, withdraw_all_button]
                ],
                resize_keyboard=True
            )

            await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:", reply_markup=markup)
        else:
            await message.answer("üö´ –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–µ—Å—Ç–∏ 10%"
@dp.message(lambda message: message.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏ 10%")
async def withdraw_10_percent(message: types.Message):
    await process_withdrawal(message, 10)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–µ—Å—Ç–∏ 25%"
@dp.message(lambda message: message.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏ 25%")
async def withdraw_25_percent(message: types.Message):
    await process_withdrawal(message, 25)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–µ—Å—Ç–∏ 50%"
@dp.message(lambda message: message.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏ 50%")
async def withdraw_50_percent(message: types.Message):
    await process_withdrawal(message, 50)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–µ—Å—Ç–∏ –≤—Å—ë"
@dp.message(lambda message: message.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏ –≤—Å—ë")
async def withdraw_all(message: types.Message):
    await process_withdrawal(message, 100)


# –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤

async def process_withdrawal(message: types.Message, percentage: int):
    user_id = message.from_user.id  # –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–æ–ª—É—á–∞—Ç—å user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if user:
        balance = user[0]

        if balance > 0:
            amount = balance * (percentage / 100)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app_balance = await cryptopay.get_balance()
            usdt_balance = get_balance('USDT', app_balance)

            if usdt_balance >= amount:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, user_id))
                conn.commit()

                # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
                transfer = await cryptopay.transfer(user_id=user_id, asset="USDT", amount=amount,
                                                    spend_id=str(uuid.uuid4()))

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.answer(f"üè¶ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount:.2f} USDT –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º.")

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                log_action(user_id, "Withdraw", amount)

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                await notify_admins(f"üè¶ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n–°—É–º–º–∞: {amount:.2f} USDT")
            else:
                # –í —Å–ª—É—á–∞–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ —É –±–æ—Ç–∞ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                invoice = await cryptopay.create_invoice(asset='USDT', amount=amount - usdt_balance)
                await message.answer("üö´ –ù–∞ —Å—á–µ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.",
                                     reply_markup=types.ReplyKeyboardRemove())
                await notify_admins(f"üè¶ –ü–û–ü–û–õ–ù–ò –°–£–ö–ê –ö–ê–ó–ù–£!!! \n"
                                    f"–ù–ê –ö–ê–ó–ù–ï {round(usdt_balance, 1)} USDT\n"
                                    f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {round(amount - usdt_balance, 1)} USDT\n"
                                    f"{invoice.mini_app_invoice_url}")
        else:
            await message.answer("üö´ –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.",
                                 reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                             reply_markup=types.ReplyKeyboardRemove())


##reply_markup=types.ReplyKeyboardRemove()

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    admin_id = config.admin_id
    if message.from_user.id == admin_id:
        markup = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="üë• –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üìã", callback_data="show_users")],
            [InlineKeyboardButton(text="üíµ –î–æ–±–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é üí≥", callback_data="add_funds")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∑–∏–Ω–æ üìà", callback_data="casino_stats")],
            [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã üè¶", callback_data="replenish_treasure")]

        ])
        await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)
    else:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")


@dp.callback_query(lambda c: c.data == "show_users")
async def show_users(callback_query: types.CallbackQuery):
    admin_id = config.admin_id
    if callback_query.from_user.id == admin_id:
        cursor.execute("SELECT * FROM users")
        users = cursor.fetchall()
        user_list = "\n".join([f"User ID: {user[0]}, Balance: {user[1]} USDT" for user in users])
        await callback_query.answer(f"üìÑ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n{user_list}")
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "casino_stats")
async def casino_stats(callback_query: types.CallbackQuery):
    conn2 = sqlite3.connect('casino_log.db')
    cursor2 = conn2.cursor()
    admin_id = config.admin_id
    if callback_query.from_user.id == admin_id:
        today = datetime.now().strftime('%Y-%m-%d')
        cursor2.execute("SELECT sum(amount) FROM logs WHERE action='Deposit' AND DATE(timestamp) = ?", (today,))
        daily_deposit = cursor2.fetchone()[0] or 0.0

        cursor2.execute("SELECT sum(amount) FROM logs WHERE action='Withdraw' AND DATE(timestamp) = ?", (today,))
        daily_withdrawal = cursor2.fetchone()[0] or 0.0

        cursor.execute("SELECT sum(balance) FROM users")
        total_user_balance = cursor.fetchone()[0] or 0.0

        cursor2.execute("SELECT sum(amount) FROM logs WHERE action='Deposit'")
        total_deposits = cursor2.fetchone()[0] or 0.0

        cursor2.execute("SELECT sum(amount) FROM logs WHERE action='Withdraw'")
        total_withdrawals = cursor2.fetchone()[0] or 0.0
        app_balance = await cryptopay.get_balance()
        usdt_balance = get_balance('USDT', app_balance)

        message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∑–∏–Ω–æ:\n\n"
            f"üìÖ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({today}):\n"
            f"üíµ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {daily_deposit:.2f} USDT\n"
            f"üí∏ –í—ã–≤–æ–¥—ã: {daily_withdrawal:.2f} USDT\n"
            f"üìä –ü—Ä–∏–±—ã–ª—å –∑–∞ –¥–µ–Ω—å {daily_deposit - daily_withdrawal:.2f}\n"
            f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_user_balance:.2f} USDT\n"
            f"üíµ –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {total_deposits:.2f} USDT\n"
            f"üí∏ –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: {total_withdrawals:.2f} USDT\n\n"
            f"üí∏ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ: {usdt_balance:.2f} $"
        )
        await callback_query.answer(message)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "replenish_treasure")
async def replenish_treasure(callback_query: types.CallbackQuery):
    admin_id = config.admin_id
    if callback_query.from_user.id == admin_id:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 500 USDT", callback_data="replenish_500")],
            [InlineKeyboardButton(text="üí¥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 1000 USDT", callback_data="replenish_1000")],
            [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 5000 USDT", callback_data="replenish_5000")],
            [InlineKeyboardButton(text="üè¶ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 10000 USDT", callback_data="replenish_10000")]
        ])

        await callback_query.answer("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∑–Ω—ã:", reply_markup=markup)


@dp.callback_query(lambda c: c.data.startswith("replenish_"))
async def process_replenish(callback_query: types.CallbackQuery):
    admin_id = config.admin_id
    if callback_query.from_user.id == admin_id:
        amount = int(callback_query.data.split("_")[1])
        app_balance = await cryptopay.get_balance()
        usdt_balance = get_balance('USDT', app_balance)

        if usdt_balance >= amount:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id IS NOT NULL", (amount,))
            conn.commit()

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            log_action(admin_id, "Treasury Replenish", amount)

            invoice = await cryptopay.create_invoice(asset='USDT', amount=amount)

            await bot.send_message(admin_id, f"üí∞ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount:.2f} USDT.\n"
                                             f"{invoice.mini_app_invoice_url}")
            await notify_admins(f"üí∞ –ö–∞–∑–Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n\n–°—É–º–º–∞: {amount:.2f} USDT")
        else:
            await bot.send_message(admin_id, "üö´ –ù–∞ —Å—á–µ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            invoice = await cryptopay.create_invoice(asset='USDT', amount=amount - usdt_balance)
            await bot.send_message(admin_id, f"üîó –°—á—ë—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∑–Ω—ã:\n{invoice.mini_app_invoice_url}")

    await callback_query.answer()


@dp.message(Command("help"))
async def help_command(message: Message):
    help_text = (
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ\n\n"
        "1. /play - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –∫—É–±–∏–∫.\n\n"
        "2. –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã:\n"
        "   - –ß–µ—Ç/–ù–µ—á–µ—Ç: –í—ã–±–µ—Ä–∏—Ç–µ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —á–µ—Ç–Ω–æ–µ –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ï—Å–ª–∏ —á–∏—Å–ª–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∞—à–∏–º –≤—ã–±–æ—Ä–æ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–µ—Ç–µ —Å—Ç–∞–≤–∫—É.\n"
        "   - –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ: –í—ã–±–µ—Ä–∏—Ç–µ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Ç–æ, —á—Ç–æ –≤—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ 4 –∏–ª–∏ –≤—ã—à–µ, –∏–ª–∏ 3 –∏ –Ω–∏–∂–µ. –ï—Å–ª–∏ –≤–∞—à–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ, –≤—ã –≤—ã–∏–≥—Ä–∞–µ—Ç–µ —Å—Ç–∞–≤–∫—É.\n\n"
        "3. –°—Ç–∞–≤–∫–∞:\n"
        "   - –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (1 USDT, 5 USDT, 10 USDT).\n\n"
        "4. –ë–∞–ª–∞–Ω—Å:\n"
        "   - –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã. –í—ã–∏–≥—Ä—ã—à–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫ –≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É, –∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∏ –≤—ã—á–∏—Ç–∞—é—Ç—Å—è.\n\n"
        "üìä –ö–æ–º–∞–Ω–¥—ã:\n"
        "   - /profile: –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –∏ —Ç–µ–∫—É—â–µ–º –±–∞–ª–∞–Ω—Å–µ.\n /deposit: –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å \n /outbalance - –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"
        "   - /help: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–≥—Ä–µ.\n\n"
        "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å!"
    )
    await message.answer(help_text)


@dp.message(Command("profile"))
async def profile(message: Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name or ""
    username = message.from_user.username or "–ù–µ –∑–∞–¥–∞–Ω"

    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()

    if user:
        balance = user[0]
        await message.answer(
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            f"üÜî ID: {user_id}\n"
            f"üë§ –ò–º—è: {first_name} {last_name}\n"
            f"üìõ –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} USDT"
        )
    else:
        await message.answer("üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


async def notify_win(user_name: str, win_amount: float, game_mode: str):
    win_chat_id = config.win_id

    messages = [
        f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã–∏–≥—Ä–∞–ª {win_amount:.1f} USDT! üèÜ –í –∏–≥—Ä–µ {game_mode} üé≤\n–ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã @{config.BOT_USERNAME}",
        f"üëè –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º @{user_name}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.1f} USDT –≤ {game_mode}! üíµ\n–°–¥–µ–ª–∞–π —Å—Ç–∞–≤–∫—É –∏ —Ç—ã @{config.BOT_USERNAME}!",
        f"üåü @{user_name} –ø–æ–ª—É—á–∏–ª –≤—ã–∏–≥—Ä—ã—à –≤ —Ä–∞–∑–º–µ—Ä–µ {win_amount:.1f} USDT –≤ –∏–≥—Ä–µ {game_mode}! ü§ë\n–ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å! @{config.BOT_USERNAME}",
        f"ü•≥ –û—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å! @{user_name} –≤—ã–∏–≥—Ä–∞–ª {win_amount:.1f} USDT –≤ {game_mode}! üéä\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º, @{config.BOT_USERNAME}!",
        f"üéà @{user_name} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç {win_amount:.1f} USDT –≤ {game_mode}! üéâ\n–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã @{config.BOT_USERNAME}!",
        f"üöÄ @{user_name} –≤—ã–∏–≥—Ä–∞–ª {win_amount:.1f} USDT –≤ {game_mode}! üí∞\n–ü–æ–ø—Ä–æ–±—É–π —Å–≤–æ—é —É–¥–∞—á—É, @{config.BOT_USERNAME}!",
        f"üî• @{user_name} –∑–∞–±–∏—Ä–∞–µ—Ç {win_amount:.1f} USDT –≤ –∏–≥—Ä–µ {game_mode}! üí•\n–°—Ç–∞–≤—å –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π @{config.BOT_USERNAME}!",
        f"üíé @{user_name} —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã–∏–≥—Ä–∞–ª {win_amount:.1f} USDT! üèÖ –í {game_mode} üåü\n–ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã, @{config.BOT_USERNAME}!",
        f"üé≤ @{user_name} –≤—ã–∏–≥—Ä–∞–ª {win_amount:.1f} USDT! üí∏ –í –∏–≥—Ä–µ {game_mode} üéâ\n–°—Ç–∞–Ω—å —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º @{config.BOT_USERNAME}!",
        f"üçæ @{user_name} –ø–æ–ª—É—á–∞–µ—Ç {win_amount:.1f} USDT –∑–∞ –ø–æ–±–µ–¥—É –≤ {game_mode}! üéÅ\n–°–¥–µ–ª–∞–π —Å–≤–æ—é —Å—Ç–∞–≤–∫—É @{config.BOT_USERNAME}!",
        f"üèÖ @{user_name} –≤—ã–∏–≥—Ä–∞–ª {win_amount:.1f} USDT –≤ {game_mode}! üéâ\n–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã, @{config.BOT_USERNAME}!",
        f"üéâ @{user_name} –≤—ã–∏–≥—Ä–∞–ª {win_amount:.1f} USDT –≤ {game_mode}! üåü\n–ü–æ–ø—Ä–æ–±—É–π —Å–≤–æ—é —É–¥–∞—á—É, @{config.BOT_USERNAME}!",
        f"‚ú® –£—Ä–∞! @{user_name} –∑–∞–±–∏—Ä–∞–µ—Ç {win_amount:.1f} USDT –∑–∞ –ø–æ–±–µ–¥—É –≤ {game_mode}! üéâ\n–ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å @{config.BOT_USERNAME}!",
        f"üèÜ @{user_name} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç {win_amount:.1f} USDT –≤ {game_mode}! üé≤\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º, @{config.BOT_USERNAME}!",
        f"üí∏ @{user_name} —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã–∏–≥—Ä–∞–ª {win_amount:.1f} USDT! üéä –í {game_mode} üéâ\n–ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã, @{config.BOT_USERNAME}!",
        f"üéà @{user_name} –≤—ã–∏–≥—Ä–∞–ª {win_amount:.1f} USDT –≤ {game_mode}! üåü\n–ü–æ–ø—Ä–æ–±—É–π —Å–≤–æ—é —É–¥–∞—á—É @{config.BOT_USERNAME}!",
        f"üåü –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º @{user_name}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.1f} USDT –≤ {game_mode}! üí∞\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º @{config.BOT_USERNAME}!",
        f"üéä @{user_name} —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã–∏–≥—Ä–∞–ª {win_amount:.1f} USDT! üöÄ –í {game_mode} üåü\n–ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã, @{config.BOT_USERNAME}!",
        f"üéâ @{user_name} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç {win_amount:.1f} USDT –≤ {game_mode}! üèÜ\n–°–¥–µ–ª–∞–π —Å–≤–æ—é —Å—Ç–∞–≤–∫—É @{config.BOT_USERNAME}!",
        f"üí∞ @{user_name} –≤—ã–∏–≥—Ä–∞–ª {win_amount:.1f} USDT –≤ {game_mode}! üéà\n–ü–æ–ø—Ä–æ–±—É–π —Å–≤–æ—é —É–¥–∞—á—É @{config.BOT_USERNAME}!",
        f"ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º @{user_name}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.1f} USDT –≤ {game_mode}! üéâ\n–ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å @{config.BOT_USERNAME}!",
        f"üéâ @{user_name} –ø–æ–ª—É—á–∞–µ—Ç {win_amount:.1f} USDT –∑–∞ –ø–æ–±–µ–¥—É –≤ {game_mode}! üèÖ\n–ü–æ–ø—Ä–æ–±—É–π —Å–≤–æ—é —É–¥–∞—á—É @{config.BOT_USERNAME}!"
    ]

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    ran = random.randint(0, 19)
    text = messages[ran]
    message = random.choice(messages).format(user_name=user_name, win_amount=win_amount, game_mode=game_mode)
    await bot.send_message(chat_id=win_chat_id, text=text)


app_balance = cryptopay.get_balance()


def get_balance(currency_code, balances):
    for balance in balances:
        if balance.currency_code == currency_code:
            return float(balance.available)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float
    return None  # –µ—Å–ª–∏ –≤–∞–ª—é—Ç—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
